# # Updates the T0s in the XML file.
# # Author: Chris.Parkinson@cern.ch, August 2015.

import time
import sys

argc = len(sys.argv)

if (len(sys.argv) != 3):
    print "incorrect number of command line arguments:", len(sys.argv)
    print "Usage: python ./UpdateXMLT0s.py <InputXMLFile.xml> <InputT0File.dat>"
    sys.exit()

# # take the file names from the command line
fname = str(sys.argv[1])
ft0name = str(sys.argv[2])
print "input xml is", fname
print "input T0 file is", ft0name

# # open the two input files, and the date-stamped output file
f = open(ft0name)
f2 = open(fname)
fname = fname.replace(".", time.strftime("_%d-%m-%Y."))
fo = open(fname, "w")

# # read the data from the files
t0lines = f.readlines()
xmllines = f2.readlines()

t0start = 8


############################################
##### Function to update the T0 values #####
############################################
def func(line, lineT0):

    warn = k - t0start

    # take the MUV3 T0, remove EOL symbol, split words into sline array
    lineT0 = lineT0[:-1]
    lineT0s = lineT0.split()

    # get the T0 offset value (third word in line)
    value = float(lineT0s[2])

    # # check for failed T0 fit
    if value > 990:
        print "WARNING [T0 #%i]: T0 value is  %i, which indicates a failed T0 fit.  Will not update T0." % (warn, value)
        value = 0

    # # check for a masked channel
    if value < -990:
        print "WARNING [T0 #%i]: T0 value is %i, which indicates a masked channel. Will not update T0." % (warn, value)
        value = 0

    value /= 0.09746507631  # convert from ns time to TDC units
    ival = int(value)  # convert to integer
    # # round up if needed
    if (value - ival) >= 0.5:
        ival = (ival + 1)

    # take the input line, remove EOL
    line = line[:-1]
    # split line and get everything after first tag
    line = line.split(">")[1]
    # split again and get everything before last tag
    line = line.split("<")[0]
    # valueI is the old T0 value
    valueI = int(line, 16)

    # subtract new T0 from existing T0
    fval = valueI - ival

    # # issue a warning for negative T0
    if fval < 0:
        print "WARNING [T0 #%i]: Updated T0 value is %i, which is negative. Setting value to zero" % (warn, fval)
        fval = 0

    # # issue a warning if the T0 value is too large
    if fval >= 512:
        print "WARNING [T0 #%i]: Updated T0 value is too large, setting to the maximum value (0x1FF)." % warn
        print "WARNING [T0 #%i]: Old value is %i, and subtracting %i gives %i (" % (warn, valueI, ival, fval) + hex(fval) + ")."
        fval = 511

    total = hex(fval)

    return "   <choff id=\"" + str((k - t0start) % 32) + "\">" + str(total) + "</choff>\n"

############################################
############################################


# # Find the first line of the T0 file that actually contains a T0 value
t0start = 0
for m in range(0, len(t0lines), 1):
    if "#" in t0lines[m]:
        t0start = t0start + 1
    else:
        break
print "first T0 line is line", t0start

k = t0start

# # for each line in the XML file,
# # if the line is a TDC offset: update the T0 value
# # else: write the line to the output file
for m in range(0, len(xmllines), 1):

    if m == 1:
        # # write a bit of preamble, to date-stamp the file
        fo.write("<!-- ################################################## -->\n")
        fo.write("<!-- ###### THIS FILE IS AUTOMATICALLY GENERATED ###### -->\n")
        fo.write("<!-- ###### DATE: " + time.strftime("%d-%m-%Y") + " AT: " + time.strftime("%I:%M:%S") + "        ###### -->\n")
        fo.write("<!-- ###### TROUBLE? CONTACT TDAQ SHIFTER        ###### -->\n")
        fo.write("<!-- ################################################## -->\n")

    # # ignore any date-stamp information in the input file,
    # # since we've just written the new date-stamp
    if "#####" in xmllines[m]:
        continue

    if "<choff id=" in xmllines[m]:
        # # this line is a T0 offset. Must update the value.

        # # check that we are reading a valid line of the T0 file
        if k < len(t0lines):
            fo.write(func(xmllines[m], t0lines[k]))
            k = k + 1
        else:
            print "WARNING: Tried to read line", k, "from the .dat file, but it doesn't exist"
            k = k + 1
            fo.write(xmllines[m])
    else:
        # # this is not a T0 line, so just write it to the output file
        fo.write(xmllines[m])

# # close the files
f.close()
f2.close()
fo.close()

print "Have produced updated T0 file called:", fname
print
