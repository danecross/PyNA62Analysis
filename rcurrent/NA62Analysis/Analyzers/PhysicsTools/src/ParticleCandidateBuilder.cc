///// cambiato tracce, vertice, ass lkr non necessaria

#include <stdlib.h>
#include <iostream>
#include <TChain.h>
#include <cstdlib>
#include <vector>
#include <iostream>
#include <map>
#include <string>

#include "ParticleCandidateBuilder.hh"
#include "functions.hh"
#include "Event.hh"
#include "Persistency.hh"
#include "DownstreamTrack.hh"
#include "BeamParameters.hh"
#include "ChParticleCandidate.hh"
#include "NeParticleCandidate.hh"
#include "TFile.h"
#include "TTree.h"
#include "TString.h"
#include "TSystem.h"
#include "TROOT.h"
#include "TStopwatch.h"
#include "CalorimeterCluster.hh"
#include "EnergyCluster.hh"
#include "EventCandidate.hh"
#include "UpstreamTrack.hh"
#include "EventVetoes.hh"

#define TRIGGER_L0_PHYSICS_TYPE 1
#define TRIGGER_L0_CONTROL_TYPE 16
#define DEBUG 1
#define DEBUGHISTO 1

using namespace std;
using namespace NA62Analysis;
using namespace NA62Constants;

/// \class ParticleCandidateBuilder
/// \Brief
/// it fill an EventCandidate container for each Event obtained by the association of a GTK track and almost one Downstream track
/// \EndBrief
/// \Detailed
/// For each GTK track selected (line 427) associated to one or more Downstream tracks (selection at line 455 and 479) is created an object EventCandidate inside the vector fParticlesEvents.
/// The selection of the vertex obtained is at the line 541 and is required the LKr association (line 503).
/// All the time windows are obtained with the trigger time
/// EventCandidate includes an Upstream Track, a vector of Charged Particle Candidates, a vector of Neutral Particle Candidates, a container for Event Vetoes and 3 indexes for the identified pion, electron and muon particle (using a threshold of 0.9 in the combined likelihood)
/// UpstreamTrack contains a GTK Track and all the Cedar candidate inside the time windows (+- 2 ns)
/// EventVetoes contains all the TRecoCHANTICandidate, TRecoLAVCandidate, TIRCHit and TSACHit inside +- 10 ns and 3 bool flags that are on if there are at least one candidate inside +- 5 ns for LAV and SAV and inside +- 2.5 ns for CHANTI
/// ChParticleCandidate contains all the selected downstream tracks with charge, vertex, CDA, momentum, Particle ID Likelihood, etc (look at ChParticleCandidate.hh)
/// NeParticleCandidate contains all the LKr cluster inside +- 5 ns and not associated to a downstream tracks with time, energy and position.
///
/// \code
///
/// OutputState stateParticleBuilder = kOInvalid;
/// std::vector<EventCandidate*> fParticlesEvents = *(std::vector<EventCandidate*>*)GetOutput("ParticleCandidateBuilder.fParticlesEvents", stateParticleBuilder);
///	if(stateParticleBuilder != kOValid) return;
///	cout<<"N EVENTS = "<<fParticlesEvents.size()<<endl;
///	for(UInt_t j=0; j<fParticlesEvents.size(); j++)
///	{
///		std::vector<ChParticleCandidate*> fChParticle = fParticlesEvents[j]->GetChargedParticleCandidates();
///		std::vector<NeParticleCandidate*> fNeParticle = fParticlesEvents[j]->GetNeutralParticleCandidates();
///		std::vector<int> fPionsIndex = fParticlesEvents[j]->GetPionsIndices();
///		std::vector<int> fElectronsIndex = fParticlesEvents[j]->GetMuonsIndices();
///		std::vector<int> fMuonsIndex = fParticlesEvents[j]->GetElectronsIndices();
///		UpstreamTrack* fUpTrack = fParticlesEvents[j]->GetUpstreamTrack();
///		EventVetoes* fEventVeto = fParticlesEvents[j]->GetEventVetoes();
///		cout<<"ev "<<j<<" N CHARGED PART = "<<fChParticle.size()<<", N NEUTRAL PARTICLE = "<<fNeParticle.size()<<", index GTK  = "<<fUpTrack->GetTrackID()<<", n KTAG Cand = "<<fUpTrack->GetNCedarCandidates()<<endl;
///		cout<<"    "<<iEvent<<" n Pions = "<<fPionsIndex.size()<<endl;
///		cout<<"    "<<iEvent<<" n Ele = "<<fElectronsIndex.size()<<endl;
///		cout<<"    "<<iEvent<<" n Muon = "<<fMuonsIndex.size()<<endl;
///		cout<<"    "<<iEvent<<" VETOS "<<endl;
///		cout<<"    "<<iEvent<<" LAV = "<<fEventVeto->GetLAVTrigMatching()<<endl;
///		cout<<"    "<<iEvent<<" SAV = "<<fEventVeto->GetSAVTrigMatching()<<endl;
///		cout<<"    "<<iEvent<<" CHANTI = "<<fEventVeto->GetCHANTITrigMatching()<<endl;
///		for (int k = 0; k < fEventVeto->GetNIRCHit(); k++)
///		{
///			TIRCHit* IRC_Hit = (TIRCHit*)fEventVeto->GetIRCHit(k);
///			cout<<"         IRC HIT "<<k<<", Time = "<<IRC_Hit->GetTime()<<endl;
///		}
///		for (int k = 0; k < fUpTrack->GetNCedarCandidates(); k++)
///		{
///			TRecoCedarCandidate* cedar_cand = (TRecoCedarCandidate*)fUpTrack->GetCedarCandidate(k);
///			cout<<"         Cedar cand "<<k<<", n sector = "<<cedar_cand->GetNSectors()<<endl;
///		}
///		for(UInt_t i=0; i<fChParticle.size(); i++)
///		{
///			cout<<"        cpar "<<i<<" Acceptance = "<<fChParticle[i]->GetAcceptance()<<endl;
///			cout<<"        cpar "<<i<<" Prob Pion = "<<fChParticle[i]->GetfPionProbabilityCombo()<<endl;
///			cout<<"        cpar "<<i<<" Prob Ele = "<<fChParticle[i]->GetfElectronProbabilityCombo()<<endl;
///			cout<<"        cpar "<<i<<" Prob Muon = "<<fChParticle[i]->GetfMuonProbabilityCombo()<<endl;
///		}
///		for(UInt_t i=0; i<fNeParticle.size(); i++)
///			{
///				cout<<"      clust "<<i<<"   cluster Energy = "<<fNeParticle[i]->GetEnergyLKr()<<endl;
///				cout<<"      clust "<<i<<"   cluster Time = "<<fNeParticle[i]->GetTime()<<endl;
///			}
///	}
/// \endcode
/// \author Jacopo Pinzino (jacopo.pinzino@cern.ch)
/// \EndDetailed

ParticleCandidateBuilder::ParticleCandidateBuilder(Core::BaseAnalysis *ba) : Analyzer(ba, "ParticleCandidateBuilder")
{
	RequestTree("GigaTracker",    new TRecoGigaTrackerEvent,    "Reco");
	RequestTree("Cedar",  new TRecoCedarEvent,  "Reco");
	RequestTree("CHANTI", new TRecoCHANTIEvent, "Reco");
	RequestTree("LKr",    new TRecoLKrEvent,    "Reco");
	RequestTree("LAV",    new TRecoLAVEvent,    "Reco");
	RequestTree("IRC",    new TRecoIRCEvent,    "Reco");
	RequestTree("SAC",    new TRecoSACEvent,    "Reco");
	RequestTree("MUV1",    new TRecoMUV1Event,    "Reco");
	RequestTree("MUV2",    new TRecoMUV2Event,    "Reco");
	RequestTree("MUV3",    new TRecoMUV3Event,    "Reco");
	RequestL0Data();
	RequestL1Data();

	fCDAcomp = new TwoLinesCDA();

	parametro = "filetemp";
	AddParam(parametro,&filetemp,"likelihood_test.txt");

}

ParticleCandidateBuilder::~ParticleCandidateBuilder(){
	delete fCDAcomp;
}


void ParticleCandidateBuilder::InitOutput(){

  	// RegisterOutput("fNeParticle", &fNeParticle);
  	// RegisterOutput("fChParticle", &fChParticle);
  	// RegisterOutput("fPionsIndex", &fPionsIndex);
  	// RegisterOutput("fElectronsIndex", &fElectronsIndex);
  	// RegisterOutput("fMuonsIndex", &fMuonsIndex);
  	RegisterOutput("fParticlesEvents", &fParticlesEvents);

	fLAVMatching = new LAVMatching();
	fSAVMatching = new SAVMatching();
}

void ParticleCandidateBuilder::InitHist(){

}

void ParticleCandidateBuilder::DefineMCSimple(){

}

void ParticleCandidateBuilder::StartOfRunUser(){

}

void ParticleCandidateBuilder::StartOfBurstUser(){

}

void ParticleCandidateBuilder::Process(int)
{

	////Double_t likelihoodValue[1000] = {0.000000,0.001000,0.002000,0.003000,0.004000,0.005000,0.006000,0.007000,0.008000,0.009000,0.010000,0.011000,0.012000,0.013000,0.014000,0.015000,0.016000,0.017000,0.018000,0.019000,0.020000,0.021000,0.022000,0.023000,0.024000,0.025000,0.026000,0.027000,0.028000,0.029000,0.030000,0.031000,0.032000,0.033000,0.034000,0.035000,0.036000,0.037000,0.038000,0.039000,0.040000,0.041000,0.042000,0.043000,0.044000,0.045000,0.046000,0.047000,0.048000,0.049000,0.050000,0.051000,0.052000,0.053000,0.054000,0.055000,0.056000,0.057000,0.058000,0.059000,0.060000,0.061000,0.062000,0.063000,0.064000,0.065000,0.066000,0.067000,0.068000,0.069000,0.070000,0.071000,0.072000,0.073000,0.074000,0.075000,0.076000,0.077000,0.078000,0.079000,0.080000,0.081000,0.082000,0.083000,0.084000,0.085000,0.086000,0.087000,0.088000,0.089000,0.090000,0.091000,0.092000,0.093000,0.094000,0.095000,0.096000,0.097000,0.098000,0.099000,0.100000,0.101000,0.102000,0.103000,0.104000,0.105000,0.106000,0.107000,0.108000,0.109000,0.110000,0.111000,0.112000,0.113000,0.114000,0.115000,0.116000,0.117000,0.118000,0.119000,0.120000,0.121000,0.122000,0.123000,0.124000,0.125000,0.126000,0.127000,0.128000,0.129000,0.130000,0.131000,0.132000,0.133000,0.134000,0.135000,0.136000,0.137000,0.138000,0.139000,0.140000,0.141000,0.142000,0.143000,0.144000,0.145000,0.146000,0.147000,0.148000,0.149000,0.150000,0.151000,0.152000,0.153000,0.154000,0.155000,0.156000,0.157000,0.158000,0.159000,0.160000,0.161000,0.162000,0.163000,0.164000,0.165000,0.166000,0.167000,0.168000,0.169000,0.170000,0.171000,0.172000,0.173000,0.174000,0.175000,0.176000,0.177000,0.178000,0.179000,0.180000,0.181000,0.182000,0.183000,0.184000,0.185000,0.186000,0.187000,0.188000,0.189000,0.190000,0.191000,0.192000,0.193000,0.194000,0.195000,0.196000,0.197000,0.198000,0.199000,0.200000,0.201000,0.202000,0.203000,0.204000,0.205000,0.206000,0.207000,0.208000,0.209000,0.210000,0.211000,0.212000,0.213000,0.214000,0.215000,0.216000,0.217000,0.218000,0.219000,0.220000,0.221000,0.222000,0.223000,0.224000,0.225000,0.226000,0.227000,0.228000,0.229000,0.230000,0.231000,0.232000,0.233000,0.234000,0.235000,0.236000,0.237000,0.238000,0.239000,0.240000,0.241000,0.242000,0.243000,0.244000,0.245000,0.246000,0.247000,0.248000,0.249000,0.250000,0.251000,0.252000,0.253000,0.254000,0.255000,0.256000,0.257000,0.258000,0.259000,0.260000,0.261000,0.262000,0.263000,0.264000,0.265000,0.266000,0.267000,0.268000,0.269000,0.270000,0.271000,0.272000,0.273000,0.274000,0.275000,0.276000,0.277000,0.278000,0.279000,0.280000,0.281000,0.282000,0.283000,0.284000,0.285000,0.286000,0.287000,0.288000,0.289000,0.290000,0.291000,0.292000,0.293000,0.294000,0.295000,0.296000,0.297000,0.298000,0.299000,0.300000,0.301000,0.302000,0.303000,0.304000,0.305000,0.306000,0.307000,0.308000,0.309000,0.310000,0.311000,0.312000,0.313000,0.314000,0.315000,0.316000,0.317000,0.318000,0.319000,0.320000,0.321000,0.322000,0.323000,0.324000,0.325000,0.326000,0.327000,0.328000,0.329000,0.330000,0.331000,0.332000,0.333000,0.334000,0.335000,0.336000,0.337000,0.338000,0.339000,0.340000,0.341000,0.342000,0.343000,0.344000,0.345000,0.346000,0.347000,0.348000,0.349000,0.350000,0.351000,0.352000,0.353000,0.354000,0.355000,0.356000,0.357000,0.358000,0.359000,0.360000,0.361000,0.362000,0.363000,0.364000,0.365000,0.366000,0.367000,0.368000,0.369000,0.370000,0.371000,0.372000,0.373000,0.374000,0.375000,0.376000,0.377000,0.378000,0.379000,0.380000,0.381000,0.382000,0.383000,0.384000,0.385000,0.386000,0.387000,0.388000,0.389000,0.390000,0.391000,0.392000,0.393000,0.394000,0.395000,0.396000,0.397000,0.398000,0.399000,0.400000,0.401000,0.402000,0.403000,0.404000,0.405000,0.406000,0.407000,0.408000,0.409000,0.410000,0.411000,0.412000,0.413000,0.414000,0.415000,0.416000,0.417000,0.418000,0.419000,0.420000,0.421000,0.422000,0.423000,0.424000,0.425000,0.426000,0.427000,0.428000,0.429000,0.430000,0.431000,0.432000,0.433000,0.434000,0.435000,0.436000,0.437000,0.438000,0.439000,0.440000,0.441000,0.442000,0.443000,0.444000,0.445000,0.446000,0.447000,0.448000,0.449000,0.450000,0.451000,0.452000,0.453000,0.454000,0.455000,0.456000,0.457000,0.458000,0.459000,0.460000,0.461000,0.462000,0.463000,0.464000,0.465000,0.466000,0.467000,0.468000,0.469000,0.470000,0.471000,0.472000,0.473000,0.474000,0.475000,0.476000,0.477000,0.478000,0.479000,0.480000,0.481000,0.482000,0.483000,0.484000,0.485000,0.486000,0.487000,0.488000,0.489000,0.490000,0.491000,0.492000,0.493000,0.494000,0.495000,0.496000,0.497000,0.498000,0.499000,0.500000,0.501000,0.502000,0.503000,0.504000,0.505000,0.506000,0.507000,0.508000,0.509000,0.510000,0.511000,0.512000,0.513000,0.514000,0.515000,0.516000,0.517000,0.518000,0.519000,0.520000,0.521000,0.522000,0.523000,0.524000,0.525000,0.526000,0.527000,0.528000,0.529000,0.530000,0.531000,0.532000,0.533000,0.534000,0.535000,0.536000,0.537000,0.538000,0.539000,0.540000,0.541000,0.542000,0.543000,0.544000,0.545000,0.546000,0.547000,0.548000,0.549000,0.550000,0.551000,0.552000,0.553000,0.554000,0.555000,0.556000,0.557000,0.558000,0.559000,0.560000,0.561000,0.562000,0.563000,0.564000,0.565000,0.566000,0.567000,0.568000,0.569000,0.570000,0.571000,0.572000,0.573000,0.574000,0.575000,0.576000,0.577000,0.578000,0.579000,0.580000,0.581000,0.582000,0.583000,0.584000,0.585000,0.586000,0.587000,0.588000,0.589000,0.590000,0.591000,0.592000,0.593000,0.594000,0.595000,0.596000,0.597000,0.598000,0.599000,0.600000,0.601000,0.602000,0.603000,0.604000,0.605000,0.606000,0.607000,0.608000,0.609000,0.610000,0.611000,0.612000,0.613000,0.614000,0.615000,0.616000,0.617000,0.618000,0.619000,0.620000,0.621000,0.622000,0.623000,0.624000,0.625000,0.626000,0.627000,0.628000,0.629000,0.630000,0.631000,0.632000,0.633000,0.634000,0.635000,0.636000,0.637000,0.638000,0.639000,0.640000,0.641000,0.642000,0.643000,0.644000,0.645000,0.646000,0.647000,0.648000,0.649000,0.650000,0.651000,0.652000,0.653000,0.654000,0.655000,0.656000,0.657000,0.658000,0.659000,0.660000,0.661000,0.662000,0.663000,0.664000,0.665000,0.666000,0.667000,0.668000,0.669000,0.670000,0.671000,0.672000,0.673000,0.674000,0.675000,0.676000,0.677000,0.678000,0.679000,0.680000,0.681000,0.682000,0.683000,0.684000,0.685000,0.686000,0.687000,0.688000,0.689000,0.690000,0.691000,0.692000,0.693000,0.694000,0.695000,0.696000,0.697000,0.698000,0.699000,0.700000,0.701000,0.702000,0.703000,0.704000,0.705000,0.706000,0.707000,0.708000,0.709000,0.710000,0.711000,0.712000,0.713000,0.714000,0.715000,0.716000,0.717000,0.718000,0.719000,0.720000,0.721000,0.722000,0.723000,0.724000,0.725000,0.726000,0.727000,0.728000,0.729000,0.730000,0.731000,0.732000,0.733000,0.734000,0.735000,0.736000,0.737000,0.738000,0.739000,0.740000,0.741000,0.742000,0.743000,0.744000,0.745000,0.746000,0.747000,0.748000,0.749000,0.750000,0.751000,0.752000,0.753000,0.754000,0.755000,0.756000,0.757000,0.758000,0.759000,0.760000,0.761000,0.762000,0.763000,0.764000,0.765000,0.766000,0.767000,0.768000,0.769000,0.770000,0.771000,0.772000,0.773000,0.774000,0.775000,0.776000,0.777000,0.778000,0.779000,0.780000,0.781000,0.782000,0.783000,0.784000,0.785000,0.786000,0.787000,0.788000,0.789000,0.790000,0.791000,0.792000,0.793000,0.794000,0.795000,0.796000,0.797000,0.798000,0.799000,0.800000,0.801000,0.802000,0.803000,0.804000,0.805000,0.806000,0.807000,0.808000,0.809000,0.810000,0.811000,0.812000,0.813000,0.814000,0.815000,0.816000,0.817000,0.818000,0.819000,0.820000,0.821000,0.822000,0.823000,0.824000,0.825000,0.826000,0.827000,0.828000,0.829000,0.830000,0.831000,0.832000,0.833000,0.834000,0.835000,0.836000,0.837000,0.838000,0.839000,0.840000,0.841000,0.842000,0.843000,0.844000,0.845000,0.846000,0.847000,0.848000,0.849000,0.850000,0.851000,0.852000,0.853000,0.854000,0.855000,0.856000,0.857000,0.858000,0.859000,0.860000,0.861000,0.862000,0.863000,0.864000,0.865000,0.866000,0.867000,0.868000,0.869000,0.870000,0.871000,0.872000,0.873000,0.874000,0.875000,0.876000,0.877000,0.878000,0.879000,0.880000,0.881000,0.882000,0.883000,0.884000,0.885000,0.886000,0.887000,0.888000,0.889000,0.890000,0.891000,0.892000,0.893000,0.894000,0.895000,0.896000,0.897000,0.898000,0.899000,0.900000,0.901000,0.902000,0.903000,0.904000,0.905000,0.906000,0.907000,0.908000,0.909000,0.910000,0.911000,0.912000,0.913000,0.914000,0.915000,0.916000,0.917000,0.918000,0.919000,0.920000,0.921000,0.922000,0.923000,0.924000,0.925000,0.926000,0.927000,0.928000,0.929000,0.930000,0.931000,0.932000,0.933000,0.934000,0.935000,0.936000,0.937000,0.938000,0.939000,0.940000,0.941000,0.942000,0.943000,0.944000,0.945000,0.946000,0.947000,0.948000,0.949000,0.950000,0.951000,0.952000,0.953000,0.954000,0.955000,0.956000,0.957000,0.958000,0.959000,0.960000,0.961000,0.962000,0.963000,0.964000,0.965000,0.966000,0.967000,0.968000,0.969000,0.970000,0.971000,0.972000,0.973000,0.974000,0.975000,0.976000,0.977000,0.978000,0.979000,0.980000,0.981000,0.982000,0.983000,0.984000,0.985000,0.986000,0.987000,0.988000,0.989000,0.990000,0.991000,0.992000,0.993000,0.994000,0.995000,0.996000,0.997000,0.998000,0.999000}
	//Double_t Pion_LKr_eff[1000] = {0.000000,0.429239,0.628824,0.706151,0.750312,0.783237,0.803287,0.819380,0.835732,0.845980,0.856120,0.865045,0.874233,0.874233,0.885524,0.885524,0.893398,0.897125,0.900541,0.903396,0.905872,0.908824,0.910869,0.912809,0.913965,0.916828,0.916828,0.919279,0.919822,0.922349,0.922349,0.925404,0.926290,0.927274,0.928354,0.929710,0.930670,0.931398,0.932721,0.933616,0.934450,0.934753,0.935778,0.936528,0.936992,0.936992,0.938074,0.938614,0.940383,0.940804,0.941452,0.942295,0.942295,0.942951,0.943588,0.943942,0.944190,0.944561,0.945051,0.945051,0.945530,0.946252,0.946863,0.947204,0.947569,0.947662,0.948245,0.948595,0.948956,0.949423,0.949521,0.949851,0.950041,0.950041,0.950338,0.950804,0.950872,0.951177,0.951384,0.952322,0.952635,0.952812,0.953121,0.953430,0.953494,0.953848,0.954157,0.954157,0.954660,0.954959,0.954959,0.955302,0.955624,0.955624,0.956099,0.956411,0.956462,0.956751,0.956800,0.956856,0.957132,0.957423,0.957482,0.957706,0.957706,0.958411,0.958473,0.958473,0.958564,0.958851,0.958893,0.958927,0.959223,0.959263,0.959301,0.959462,0.959501,0.959658,0.959658,0.959872,0.959872,0.960034,0.960382,0.960540,0.960690,0.960978,0.961139,0.961306,0.961341,0.961374,0.961396,0.961432,0.961608,0.961882,0.962037,0.962061,0.962102,0.962135,0.962400,0.962685,0.962722,0.962873,0.963023,0.963023,0.963227,0.963258,0.963258,0.963421,0.963447,0.963447,0.963486,0.963517,0.963670,0.963691,0.963837,0.964117,0.964159,0.964179,0.964324,0.964350,0.964623,0.964645,0.964672,0.964683,0.964825,0.964849,0.964993,0.965012,0.965153,0.965182,0.965202,0.965582,0.965716,0.965855,0.965855,0.966403,0.966547,0.966547,0.966832,0.966974,0.966974,0.967130,0.967298,0.967298,0.967459,0.967478,0.967478,0.967655,0.967673,0.967696,0.967831,0.968229,0.968245,0.968261,0.968398,0.968557,0.968696,0.968713,0.968739,0.968756,0.968779,0.968788,0.968809,0.968833,0.968859,0.968859,0.968887,0.968908,0.968908,0.969065,0.969206,0.969206,0.969477,0.969617,0.969617,0.969640,0.969774,0.969774,0.969921,0.969945,0.970086,0.970101,0.970236,0.970249,0.970394,0.970403,0.970417,0.970564,0.970582,0.971221,0.971234,0.971366,0.971377,0.971509,0.971522,0.971650,0.971650,0.971784,0.971813,0.971813,0.971830,0.972107,0.972107,0.972392,0.972401,0.972411,0.972432,0.972448,0.972589,0.972725,0.972743,0.972878,0.972892,0.973148,0.973163,0.973299,0.973439,0.973462,0.973470,0.973479,0.973611,0.973619,0.973635,0.973640,0.973778,0.973793,0.973810,0.973820,0.973830,0.973840,0.973849,0.973868,0.973884,0.973891,0.973898,0.973909,0.973922,0.973938,0.974071,0.974076,0.974086,0.974222,0.974231,0.974489,0.974500,0.974500,0.974505,0.974523,0.974535,0.974547,0.974560,0.974560,0.974699,0.974722,0.974734,0.974740,0.974749,0.974749,0.974760,0.974906,0.974918,0.974925,0.974934,0.974934,0.974946,0.974960,0.974969,0.974978,0.975115,0.975252,0.975384,0.975390,0.975397,0.975533,0.975541,0.975552,0.975562,0.975692,0.975700,0.975715,0.975847,0.975977,0.975986,0.976001,0.976009,0.976015,0.976019,0.976026,0.976033,0.976040,0.976173,0.976435,0.976564,0.976696,0.976705,0.976709,0.976839,0.976977,0.977106,0.977236,0.977244,0.977254,0.977382,0.977521,0.977530,0.977537,0.977667,0.977667,0.977918,0.977923,0.978059,0.978193,0.978199,0.978199,0.978209,0.978341,0.978484,0.978609,0.978616,0.978748,0.978748,0.978883,0.979136,0.979144,0.979152,0.979157,0.979157,0.979420,0.979431,0.979436,0.979443,0.979571,0.979571,0.979584,0.979590,0.979717,0.979719,0.979855,0.979862,0.979867,0.979879,0.979888,0.980019,0.980023,0.980156,0.980163,0.980291,0.980295,0.980300,0.980308,0.980561,0.980566,0.980575,0.980709,0.980715,0.980725,0.980733,0.980739,0.980744,0.980875,0.981005,0.981011,0.981013,0.981020,0.981149,0.981153,0.981160,0.981166,0.981174,0.981301,0.981301,0.981429,0.981438,0.981443,0.981448,0.981452,0.981452,0.981460,0.981472,0.981474,0.981603,0.981605,0.981605,0.981608,0.981743,0.981751,0.981755,0.981881,0.981881,0.982019,0.982269,0.982399,0.982401,0.982409,0.982409,0.982415,0.982423,0.982430,0.982563,0.982570,0.982704,0.982710,0.982716,0.982720,0.982725,0.982725,0.982856,0.982859,0.982987,0.982992,0.982996,0.982999,0.983005,0.983138,0.983266,0.983391,0.983395,0.983522,0.983525,0.983527,0.983533,0.983784,0.983912,0.983912,0.983917,0.983920,0.984171,0.984178,0.984179,0.984184,0.984309,0.984312,0.984312,0.984317,0.984318,0.984327,0.984330,0.984455,0.984455,0.984584,0.984714,0.984971,0.984975,0.984979,0.984979,0.985108,0.985118,0.985124,0.985128,0.985136,0.985264,0.985264,0.985274,0.985275,0.985275,0.985280,0.985412,0.985412,0.985413,0.985414,0.985417,0.985421,0.985426,0.985555,0.985557,0.985560,0.985685,0.985696,0.985700,0.985827,0.985829,0.985832,0.985957,0.985963,0.985970,0.986223,0.986228,0.986229,0.986354,0.986480,0.986733,0.986733,0.986739,0.986742,0.986748,0.986752,0.986754,0.986757,0.986885,0.986887,0.986891,0.986896,0.986901,0.986905,0.986906,0.986909,0.986913,0.986915,0.986920,0.987049,0.987050,0.987178,0.987185,0.987311,0.987314,0.987440,0.987443,0.987444,0.987446,0.987452,0.987579,0.987584,0.987588,0.987590,0.987593,0.987595,0.987602,0.987604,0.987606,0.987731,0.987740,0.987868,0.987870,0.987872,0.987879,0.987882,0.987883,0.987884,0.987888,0.987888,0.987891,0.987893,0.988021,0.988021,0.988025,0.988028,0.988029,0.988157,0.988158,0.988160,0.988162,0.988162,0.988163,0.988289,0.988420,0.988425,0.988679,0.988680,0.988680,0.988806,0.988806,0.988808,0.988808,0.988936,0.988936,0.988938,0.988941,0.988947,0.988949,0.989075,0.989078,0.989080,0.989083,0.989085,0.989092,0.989095,0.989095,0.989095,0.989098,0.989225,0.989228,0.989232,0.989235,0.989235,0.989241,0.989365,0.989493,0.989498,0.989500,0.989500,0.989505,0.989509,0.989509,0.989513,0.989519,0.989645,0.989645,0.989645,0.989646,0.989646,0.989649,0.989650,0.989651,0.989659,0.989660,0.989664,0.989790,0.989794,0.989799,0.989800,0.989802,0.989932,0.989933,0.989936,0.989940,0.989942,0.989945,0.989946,0.989949,0.989952,0.989954,0.989954,0.989956,0.989960,0.989960,0.990086,0.990216,0.990218,0.990223,0.990226,0.990476,0.990483,0.990485,0.990485,0.990612,0.990614,0.990615,0.990615,0.990615,0.990619,0.990620,0.990626,0.990627,0.990631,0.990636,0.990636,0.990762,0.990765,0.990894,0.990894,0.991022,0.991025,0.991149,0.991153,0.991282,0.991283,0.991285,0.991411,0.991413,0.991415,0.991540,0.991540,0.991545,0.991672,0.991672,0.991677,0.991801,0.991806,0.991933,0.991936,0.991940,0.991944,0.991949,0.991953,0.991954,0.991960,0.991960,0.991964,0.992216,0.992220,0.992346,0.992351,0.992354,0.992357,0.992360,0.992363,0.992369,0.992373,0.992373,0.992373,0.992497,0.992501,0.992627,0.992631,0.992631,0.992759,0.992760,0.992887,0.992892,0.992893,0.993022,0.993022,0.993023,0.993027,0.993032,0.993037,0.993040,0.993041,0.993041,0.993041,0.993041,0.993044,0.993044,0.993044,0.993044,0.993171,0.993171,0.993177,0.993302,0.993303,0.993307,0.993309,0.993312,0.993317,0.993318,0.993323,0.993451,0.993451,0.993454,0.993458,0.993463,0.993590,0.993593,0.993597,0.993598,0.993723,0.993725,0.993727,0.993730,0.993731,0.993732,0.993733,0.993740,0.993742,0.993745,0.993746,0.993749,0.993876,0.993882,0.993883,0.994008,0.994008,0.994008,0.994135,0.994136,0.994138,0.994140,0.994140,0.994141,0.994143,0.994146,0.994147,0.994151,0.994155,0.994157,0.994160,0.994164,0.994168,0.994169,0.994170,0.994300,0.994426,0.994428,0.994555,0.994557,0.994561,0.994562,0.994562,0.994566,0.994569,0.994569,0.994695,0.994696,0.994699,0.994947,0.994948,0.994948,0.994951,0.995076,0.995076,0.995077,0.995080,0.995082,0.995082,0.995335,0.995338,0.995340,0.995340,0.995342,0.995346,0.995346,0.995346,0.995347,0.995348,0.995348,0.995480,0.995607,0.995611,0.995738,0.995738,0.995866,0.995868,0.995872,0.995872,0.995873,0.995997,0.996000,0.996000,0.996001,0.996003,0.996005,0.996005,0.996007,0.996009,0.996014,0.996014,0.996014,0.996019,0.996274,0.996274,0.996277,0.996279,0.996281,0.996281,0.996286,0.996412,0.996413,0.996415,0.996415,0.996417,0.996544,0.996546,0.996549,0.996553,0.996554,0.996554,0.996554,0.996679,0.996686,0.996811,0.996811,0.996811,0.996811,0.996815,0.996818,0.996820,0.996822,0.996827,0.996831,0.996835,0.996836,0.996836,0.996836,0.996960,0.996963,0.997214,0.997341,0.997341,0.997343,0.997469,0.997593,0.997594,0.997598,0.997605,0.997605,0.997612,0.997616,0.997618,0.997622,0.997623,0.997626,0.997630,0.997631,0.997633,0.997637,0.997637,0.997642,0.997769,0.997773,0.997775,0.997902,0.997903,0.997904,0.997904,0.997905,0.998032,0.998033,0.998037,0.998040,0.998042,0.998046,0.998051,0.998178,0.998179,0.998180,0.998183,0.998183,0.998188,0.998191,0.998198,0.998324,0.998326,0.998326,0.998326,0.998326,0.998328,0.998335,0.998338,0.998341,0.998467,0.998469,0.998472,0.998476,0.998479,0.998484,0.998610,0.998610,0.998613,0.998614,0.998618,0.998622,0.998629,0.998629,0.998637,0.998641,0.998646,0.998649,0.998654,0.998654,0.998655,0.998659,0.998659,0.998789,0.998792,0.998795,0.998921,0.998922,0.998923,0.998928,0.998928,0.999059,0.999059,0.999186,0.999194,0.999320,0.999323,0.999327,0.999329,0.999337,0.999340,0.999342,0.999347,0.999357,0.999357,0.999361,0.999491,0.999494,0.999744,0.999748,0.999751};
	//Double_t Muon_LKr_eff[1000] = {0.000000,0.506220,0.642316,0.700838,0.737427,0.763342,0.782646,0.798635,0.811838,0.823370,0.832907,0.841606,0.848926,0.848926,0.862991,0.862991,0.874111,0.878339,0.882939,0.887396,0.891226,0.895114,0.898755,0.901400,0.903981,0.906279,0.906279,0.911155,0.912943,0.914686,0.914686,0.918539,0.920358,0.922096,0.923869,0.925350,0.927402,0.928761,0.930066,0.931640,0.933223,0.934500,0.935603,0.936596,0.937515,0.937515,0.939588,0.940361,0.941199,0.941928,0.942747,0.943522,0.943522,0.945485,0.946158,0.946867,0.947496,0.947981,0.948657,0.948657,0.949200,0.950173,0.950761,0.951315,0.951823,0.952432,0.952807,0.953293,0.953701,0.954211,0.954619,0.955050,0.955447,0.955447,0.956296,0.956705,0.957226,0.957524,0.957890,0.958232,0.958652,0.958928,0.959181,0.959490,0.959744,0.959998,0.960296,0.960296,0.960814,0.961313,0.961313,0.961887,0.962155,0.962155,0.962739,0.963084,0.963349,0.963660,0.963914,0.964157,0.964532,0.964874,0.965161,0.965561,0.965561,0.966250,0.966592,0.966592,0.966989,0.967177,0.967331,0.967419,0.967651,0.967817,0.967982,0.968137,0.968357,0.968534,0.968534,0.968942,0.968942,0.969085,0.969563,0.969728,0.969916,0.970161,0.970348,0.970536,0.970748,0.970892,0.971181,0.971292,0.971501,0.971589,0.971700,0.971854,0.972031,0.972152,0.972397,0.972486,0.972574,0.972852,0.973062,0.973062,0.973371,0.973459,0.973459,0.973804,0.973947,0.973947,0.974135,0.974289,0.974378,0.974455,0.974667,0.974811,0.974976,0.975119,0.975321,0.975431,0.975508,0.975754,0.975897,0.976018,0.976129,0.976250,0.976305,0.976427,0.976603,0.976691,0.976769,0.976824,0.976912,0.976956,0.976956,0.977122,0.977356,0.977356,0.977544,0.977588,0.977588,0.977886,0.977930,0.977930,0.978139,0.978418,0.978418,0.978650,0.978694,0.978793,0.978848,0.978892,0.979093,0.979160,0.979281,0.979369,0.979436,0.979546,0.979601,0.979711,0.979767,0.979855,0.979921,0.979976,0.980210,0.980210,0.980431,0.980475,0.980475,0.980608,0.980820,0.980820,0.980919,0.980952,0.980952,0.981063,0.981162,0.981162,0.981338,0.981383,0.981471,0.981504,0.981548,0.981614,0.981658,0.981714,0.981758,0.981824,0.981868,0.981956,0.982034,0.982100,0.982155,0.982188,0.982400,0.982489,0.982489,0.982588,0.982720,0.982720,0.982775,0.982908,0.982908,0.982996,0.983073,0.983117,0.983173,0.983195,0.983217,0.983294,0.983360,0.983393,0.983515,0.983548,0.983592,0.983658,0.983691,0.983735,0.983791,0.983824,0.983868,0.983912,0.983989,0.984022,0.984033,0.984044,0.984099,0.984122,0.984166,0.984210,0.984243,0.984265,0.984320,0.984408,0.984453,0.984541,0.984629,0.984695,0.984717,0.984750,0.984806,0.984861,0.984916,0.985015,0.985037,0.985037,0.985081,0.985159,0.985214,0.985236,0.985269,0.985269,0.985335,0.985401,0.985457,0.985534,0.985545,0.985545,0.985600,0.985699,0.985766,0.985788,0.985810,0.985810,0.985843,0.985843,0.985843,0.985843,0.985887,0.985931,0.986008,0.986041,0.986085,0.986108,0.986152,0.986174,0.986229,0.986284,0.986317,0.986339,0.986361,0.986383,0.986439,0.986461,0.986472,0.986505,0.986516,0.986527,0.986560,0.986593,0.986637,0.986670,0.986692,0.986781,0.986792,0.986847,0.986902,0.986957,0.987012,0.987045,0.987056,0.987112,0.987156,0.987178,0.987233,0.987233,0.987277,0.987277,0.987310,0.987354,0.987589,0.987622,0.987633,0.987633,0.987644,0.987644,0.987710,0.987721,0.987743,0.987787,0.987787,0.987853,0.987887,0.987909,0.987931,0.987953,0.987953,0.987986,0.987997,0.988008,0.988052,0.988096,0.988096,0.988118,0.988151,0.988184,0.988319,0.988353,0.988353,0.988375,0.988408,0.988419,0.988441,0.988518,0.988540,0.988573,0.988628,0.988650,0.988684,0.988695,0.988739,0.988783,0.988973,0.989006,0.989028,0.989050,0.989083,0.989116,0.989127,0.989194,0.989249,0.989282,0.989293,0.989326,0.989359,0.989370,0.989414,0.989458,0.989470,0.989470,0.989470,0.989514,0.989558,0.989580,0.989737,0.989748,0.989748,0.989770,0.989825,0.989869,0.989880,0.989924,0.989924,0.989947,0.989980,0.990002,0.990035,0.990068,0.990068,0.990101,0.990112,0.990145,0.990167,0.990211,0.990211,0.990255,0.990278,0.990333,0.990333,0.990355,0.990388,0.990399,0.990399,0.990432,0.990454,0.990476,0.990600,0.990611,0.990633,0.990655,0.990677,0.990688,0.990733,0.990755,0.990777,0.990799,0.990843,0.990909,0.991066,0.991212,0.991234,0.991234,0.991256,0.991278,0.991289,0.991311,0.991334,0.991334,0.991356,0.991389,0.991422,0.991433,0.991433,0.991455,0.991488,0.991532,0.991543,0.991598,0.991598,0.991609,0.991620,0.991631,0.991631,0.991676,0.991676,0.991676,0.991753,0.991764,0.991764,0.991764,0.991797,0.991797,0.991841,0.991907,0.991940,0.991962,0.992007,0.992007,0.992051,0.992062,0.992095,0.992117,0.992150,0.992194,0.992216,0.992238,0.992249,0.992282,0.992282,0.992282,0.992293,0.992304,0.992327,0.992327,0.992349,0.992349,0.992360,0.992360,0.992382,0.992404,0.992426,0.992459,0.992492,0.992492,0.992503,0.992514,0.992536,0.992547,0.992558,0.992580,0.992580,0.992613,0.992646,0.992646,0.992691,0.992702,0.992713,0.992757,0.992779,0.992801,0.992801,0.992812,0.992834,0.992834,0.992856,0.992933,0.992933,0.992955,0.992966,0.992966,0.993011,0.993033,0.993044,0.993066,0.993077,0.993077,0.993077,0.993088,0.993088,0.993099,0.993110,0.993121,0.993132,0.993154,0.993165,0.993165,0.993187,0.993187,0.993187,0.993187,0.993209,0.993209,0.993242,0.993242,0.993275,0.993275,0.993297,0.993342,0.993386,0.993397,0.993408,0.993408,0.993430,0.993463,0.993474,0.993518,0.993675,0.993686,0.993697,0.993741,0.993741,0.993763,0.993786,0.993808,0.993808,0.993830,0.993841,0.993852,0.993863,0.993885,0.993918,0.993929,0.993962,0.993984,0.993995,0.994006,0.994006,0.994017,0.994050,0.994083,0.994094,0.994094,0.994117,0.994161,0.994172,0.994172,0.994216,0.994216,0.994227,0.994227,0.994260,0.994282,0.994304,0.994326,0.994326,0.994337,0.994348,0.994370,0.994403,0.994414,0.994425,0.994437,0.994470,0.994481,0.994492,0.994525,0.994525,0.994525,0.994536,0.994558,0.994569,0.994580,0.994602,0.994613,0.994635,0.994635,0.994635,0.994657,0.994668,0.994690,0.994701,0.994712,0.994745,0.994745,0.994745,0.994756,0.994756,0.994768,0.994768,0.994779,0.994790,0.994801,0.994801,0.994823,0.994845,0.994845,0.994845,0.994856,0.994867,0.994878,0.994878,0.994878,0.994878,0.994878,0.994900,0.994911,0.994911,0.994933,0.994933,0.994944,0.994944,0.994977,0.994999,0.995010,0.995043,0.995054,0.995065,0.995099,0.995121,0.995121,0.995121,0.995143,0.995154,0.995165,0.995165,0.995187,0.995187,0.995187,0.995198,0.995209,0.995209,0.995253,0.995275,0.995297,0.995297,0.995308,0.995308,0.995308,0.995308,0.995319,0.995319,0.995319,0.995341,0.995352,0.995352,0.995419,0.995430,0.995430,0.995441,0.995441,0.995452,0.995485,0.995507,0.995540,0.995540,0.995697,0.995719,0.995730,0.995785,0.995785,0.995840,0.995840,0.995851,0.995885,0.995896,0.995907,0.995907,0.995918,0.995940,0.995951,0.995962,0.995973,0.995984,0.995984,0.995984,0.995995,0.995995,0.996017,0.996028,0.996061,0.996061,0.996083,0.996105,0.996105,0.996127,0.996149,0.996149,0.996160,0.996171,0.996182,0.996227,0.996227,0.996227,0.996238,0.996238,0.996249,0.996260,0.996293,0.996315,0.996326,0.996359,0.996370,0.996381,0.996414,0.996436,0.996436,0.996447,0.996491,0.996491,0.996513,0.996535,0.996580,0.996591,0.996602,0.996624,0.996624,0.996646,0.996646,0.996646,0.996657,0.996668,0.996679,0.996679,0.996690,0.996701,0.996734,0.996734,0.996756,0.996756,0.996756,0.996756,0.996778,0.996778,0.996811,0.996822,0.996855,0.996866,0.996900,0.996944,0.996944,0.996955,0.996999,0.997043,0.997043,0.997054,0.997065,0.997076,0.997076,0.997087,0.997087,0.997109,0.997120,0.997142,0.997142,0.997175,0.997209,0.997264,0.997264,0.997286,0.997297,0.997319,0.997319,0.997319,0.997352,0.997352,0.997385,0.997429,0.997451,0.997473,0.997484,0.997506,0.997506,0.997540,0.997540,0.997540,0.997551,0.997562,0.997617,0.997639,0.997672,0.997694,0.997716,0.997716,0.997727,0.997738,0.997749,0.997749,0.997760,0.997760,0.997771,0.997782,0.997793,0.997848,0.997904,0.997926,0.997926,0.997926,0.998025,0.998025,0.998025,0.998036,0.998047,0.998047,0.998047,0.998058,0.998058,0.998124,0.998135,0.998179,0.998179,0.998202,0.998213,0.998224,0.998235,0.998246,0.998268,0.998290,0.998323,0.998323,0.998323,0.998345,0.998345,0.998356,0.998367,0.998367,0.998378,0.998389,0.998389,0.998422,0.998433,0.998433,0.998433,0.998444,0.998444,0.998466,0.998510,0.998522,0.998544,0.998555,0.998588,0.998599,0.998621,0.998654,0.998665,0.998698,0.998731,0.998742,0.998742,0.998753,0.998775,0.998775,0.998819,0.998841,0.998853,0.998864,0.998875,0.998897,0.998919,0.998919,0.998930,0.998930,0.998952,0.998963,0.998985,0.998985,0.998996,0.999007,0.999007,0.999018,0.999040,0.999073,0.999084,0.999095,0.999095,0.999117,0.999117,0.999128,0.999139,0.999161,0.999172,0.999228,0.999250,0.999250,0.999272,0.999316,0.999338,0.999338,0.999360,0.999382,0.999426,0.999426,0.999459,0.999470,0.999470,0.999470,0.999470,0.999492,0.999503,0.999503,0.999515,0.999526,0.999559,0.999570,0.999592,0.999603,0.999603,0.999614,0.999614,0.999614,0.999647,0.999680,0.999680,0.999713,0.999713,0.999713,0.999724,0.999746,0.999757,0.999768,0.999779,0.999779,0.999779,0.999779,0.999779,0.999812,0.999812,0.999823,0.999846,0.999857,0.999879};
	//Double_t Ele_LKr_eff[1000] = {0.000000,0.736882,0.775514,0.798558,0.811694,0.821942,0.829869,0.835516,0.840761,0.846868,0.851951,0.856134,0.859914,0.859914,0.865191,0.865191,0.870491,0.873389,0.876732,0.878566,0.880843,0.882754,0.884821,0.886787,0.888451,0.890058,0.890058,0.892788,0.894149,0.895660,0.895660,0.897950,0.898938,0.899787,0.900929,0.902143,0.903490,0.904604,0.905898,0.906847,0.907720,0.908439,0.909223,0.910145,0.911050,0.911050,0.913005,0.913987,0.914717,0.915434,0.916394,0.917133,0.917133,0.918613,0.919363,0.920150,0.920702,0.921399,0.922039,0.922039,0.922580,0.924093,0.924567,0.925031,0.925617,0.926036,0.926446,0.926854,0.927284,0.927782,0.928234,0.928587,0.929021,0.929021,0.929905,0.930303,0.930777,0.931119,0.931472,0.931980,0.932355,0.932719,0.933094,0.933348,0.933580,0.933866,0.934000,0.934000,0.934739,0.935148,0.935148,0.935810,0.936185,0.936185,0.936692,0.937034,0.937376,0.937663,0.937895,0.938248,0.938667,0.939009,0.939285,0.939562,0.939562,0.940092,0.940335,0.940335,0.940776,0.941151,0.941306,0.941570,0.941857,0.942155,0.942519,0.942740,0.943049,0.943281,0.943281,0.943900,0.943900,0.944032,0.944705,0.944959,0.945312,0.945467,0.945577,0.945786,0.946151,0.946316,0.946570,0.946813,0.946956,0.947178,0.947410,0.947619,0.947873,0.948005,0.948248,0.948524,0.948712,0.948998,0.949241,0.949241,0.949661,0.949804,0.949804,0.950102,0.950311,0.950311,0.950670,0.950791,0.951035,0.951156,0.951267,0.951522,0.951665,0.951910,0.952153,0.952385,0.952550,0.952738,0.952948,0.953058,0.953146,0.953334,0.953532,0.953731,0.953830,0.953897,0.954029,0.954150,0.954338,0.954492,0.954492,0.954834,0.955077,0.955077,0.955441,0.955629,0.955629,0.956092,0.956169,0.956169,0.956556,0.956710,0.956710,0.956975,0.957240,0.957362,0.957462,0.957627,0.957782,0.957892,0.958013,0.958113,0.958366,0.958521,0.958565,0.958675,0.958830,0.958896,0.959050,0.959150,0.959315,0.959315,0.959580,0.959668,0.959668,0.959966,0.960088,0.960088,0.960220,0.960408,0.960408,0.960606,0.960805,0.960805,0.961070,0.961147,0.961213,0.961268,0.961401,0.961500,0.961566,0.961732,0.961842,0.961919,0.962007,0.962151,0.962327,0.962482,0.962581,0.962647,0.962680,0.962824,0.962824,0.962890,0.963122,0.963122,0.963199,0.963409,0.963409,0.963563,0.963640,0.963762,0.963828,0.963894,0.963960,0.964137,0.964258,0.964402,0.964468,0.964523,0.964678,0.964777,0.964821,0.964865,0.964920,0.964964,0.965053,0.965108,0.965186,0.965230,0.965308,0.965407,0.965484,0.965550,0.965584,0.965705,0.965804,0.965992,0.966113,0.966201,0.966279,0.966367,0.966466,0.966577,0.966687,0.966797,0.966863,0.966952,0.967095,0.967183,0.967283,0.967283,0.967382,0.967559,0.967603,0.967724,0.967746,0.967746,0.967879,0.968088,0.968121,0.968287,0.968320,0.968320,0.968441,0.968586,0.968674,0.968895,0.968939,0.968939,0.969149,0.969182,0.969326,0.969393,0.969492,0.969591,0.969668,0.969779,0.969856,0.969911,0.969977,0.970121,0.970187,0.970209,0.970275,0.970308,0.970386,0.970463,0.970573,0.970639,0.970739,0.970761,0.970805,0.970926,0.971015,0.971070,0.971191,0.971213,0.971257,0.971335,0.971379,0.971445,0.971566,0.971677,0.971754,0.971754,0.971853,0.971908,0.972008,0.972063,0.972129,0.972184,0.972217,0.972217,0.972283,0.972361,0.972460,0.972548,0.972603,0.972603,0.972636,0.972659,0.972802,0.972890,0.972967,0.973056,0.973056,0.973155,0.973232,0.973276,0.973332,0.973409,0.973409,0.973453,0.973596,0.973641,0.973696,0.973751,0.973751,0.973894,0.973949,0.974060,0.974104,0.974148,0.974247,0.974292,0.974336,0.974380,0.974435,0.974490,0.974578,0.974623,0.974733,0.974777,0.974821,0.974876,0.974909,0.974976,0.975042,0.975108,0.975163,0.975174,0.975229,0.975262,0.975340,0.975406,0.975451,0.975540,0.975584,0.975606,0.975683,0.975705,0.975782,0.975849,0.975926,0.975948,0.975948,0.975992,0.976113,0.976224,0.976279,0.976301,0.976301,0.976378,0.976577,0.976599,0.976621,0.976709,0.976709,0.976742,0.976830,0.976864,0.976875,0.976919,0.976919,0.977040,0.977084,0.977117,0.977128,0.977206,0.977206,0.977294,0.977382,0.977393,0.977481,0.977515,0.977548,0.977625,0.977691,0.977768,0.977812,0.977868,0.977901,0.977934,0.977967,0.978000,0.978022,0.978088,0.978132,0.978132,0.978199,0.978232,0.978298,0.978331,0.978364,0.978386,0.978386,0.978430,0.978474,0.978541,0.978563,0.978607,0.978651,0.978662,0.978673,0.978728,0.978761,0.978805,0.978805,0.978839,0.978883,0.978916,0.978971,0.978982,0.978982,0.979015,0.979048,0.979148,0.979236,0.979313,0.979313,0.979379,0.979412,0.979434,0.979545,0.979589,0.979622,0.979622,0.979666,0.979743,0.979787,0.979832,0.979876,0.979876,0.979909,0.980008,0.980063,0.980118,0.980152,0.980207,0.980240,0.980273,0.980295,0.980372,0.980394,0.980427,0.980461,0.980461,0.980494,0.980516,0.980549,0.980615,0.980648,0.980681,0.980714,0.980792,0.980825,0.980836,0.980880,0.980979,0.981012,0.981089,0.981134,0.981178,0.981200,0.981255,0.981299,0.981332,0.981365,0.981420,0.981465,0.981509,0.981564,0.981619,0.981652,0.981663,0.981729,0.981762,0.981840,0.981884,0.981906,0.981939,0.981962,0.982084,0.982117,0.982139,0.982172,0.982227,0.982271,0.982304,0.982360,0.982382,0.982404,0.982437,0.982492,0.982536,0.982657,0.982691,0.982735,0.982768,0.982813,0.982868,0.982901,0.982935,0.982990,0.982990,0.983012,0.983023,0.983067,0.983089,0.983166,0.983188,0.983210,0.983221,0.983255,0.983299,0.983365,0.983365,0.983409,0.983409,0.983453,0.983508,0.983563,0.983586,0.983619,0.983674,0.983751,0.983751,0.983784,0.983806,0.983806,0.983828,0.983839,0.983894,0.983894,0.983917,0.983939,0.983950,0.983983,0.984016,0.984049,0.984148,0.984148,0.984192,0.984203,0.984237,0.984270,0.984314,0.984347,0.984380,0.984413,0.984457,0.984556,0.984579,0.984612,0.984612,0.984711,0.984733,0.984744,0.984788,0.984876,0.984921,0.984932,0.984965,0.985031,0.985053,0.985086,0.985108,0.985163,0.985163,0.985207,0.985307,0.985329,0.985351,0.985395,0.985439,0.985483,0.985505,0.985527,0.985538,0.985572,0.985594,0.985638,0.985649,0.985704,0.985748,0.985781,0.985781,0.985847,0.985847,0.985892,0.985936,0.985958,0.985991,0.985991,0.986013,0.986035,0.986134,0.986189,0.986234,0.986256,0.986267,0.986322,0.986388,0.986432,0.986454,0.986498,0.986520,0.986576,0.986598,0.986642,0.986675,0.986697,0.986697,0.986708,0.986774,0.986796,0.986807,0.986818,0.986851,0.986896,0.986918,0.986929,0.986951,0.987039,0.987105,0.987105,0.987149,0.987182,0.987182,0.987182,0.987227,0.987238,0.987249,0.987260,0.987337,0.987359,0.987392,0.987414,0.987436,0.987436,0.987469,0.987469,0.987525,0.987569,0.987591,0.987591,0.987646,0.987646,0.987657,0.987701,0.987712,0.987734,0.987789,0.987822,0.987822,0.987844,0.987867,0.987944,0.987999,0.988054,0.988065,0.988076,0.988087,0.988120,0.988187,0.988198,0.988198,0.988220,0.988286,0.988319,0.988341,0.988363,0.988385,0.988418,0.988473,0.988484,0.988540,0.988595,0.988606,0.988606,0.988650,0.988683,0.988760,0.988804,0.988826,0.988849,0.988860,0.988860,0.988926,0.988937,0.988970,0.989003,0.989014,0.989047,0.989069,0.989124,0.989146,0.989180,0.989246,0.989257,0.989279,0.989279,0.989301,0.989323,0.989356,0.989367,0.989411,0.989422,0.989444,0.989444,0.989477,0.989544,0.989599,0.989610,0.989654,0.989709,0.989731,0.989753,0.989842,0.989908,0.989941,0.989974,0.990018,0.990040,0.990073,0.990162,0.990173,0.990195,0.990206,0.990228,0.990239,0.990272,0.990294,0.990305,0.990327,0.990338,0.990371,0.990415,0.990437,0.990504,0.990537,0.990592,0.990603,0.990614,0.990625,0.990669,0.990680,0.990691,0.990713,0.990746,0.990768,0.990801,0.990812,0.990879,0.990879,0.990879,0.990912,0.990956,0.991000,0.991011,0.991044,0.991066,0.991099,0.991121,0.991143,0.991210,0.991210,0.991232,0.991276,0.991276,0.991276,0.991320,0.991320,0.991342,0.991353,0.991353,0.991364,0.991419,0.991419,0.991419,0.991441,0.991463,0.991508,0.991530,0.991552,0.991585,0.991607,0.991618,0.991684,0.991717,0.991761,0.991761,0.991794,0.991806,0.991850,0.991872,0.991894,0.991949,0.991949,0.991982,0.991993,0.991993,0.992048,0.992048,0.992081,0.992114,0.992137,0.992159,0.992203,0.992214,0.992225,0.992269,0.992302,0.992357,0.992390,0.992390,0.992412,0.992434,0.992445,0.992523,0.992556,0.992578,0.992611,0.992622,0.992655,0.992688,0.992732,0.992732,0.992787,0.992843,0.992854,0.992942,0.993019,0.993085,0.993107,0.993118,0.993152,0.993218,0.993229,0.993240,0.993273,0.993339,0.993361,0.993361,0.993394,0.993416,0.993472,0.993494,0.993505,0.993527,0.993538,0.993549,0.993593,0.993637,0.993659,0.993703,0.993758,0.993792,0.993825,0.993869,0.993902,0.993935,0.993979,0.994012,0.994023,0.994100,0.994145,0.994167,0.994211,0.994277,0.994365,0.994365,0.994431,0.994454,0.994498,0.994542,0.994586,0.994663,0.994663,0.994685,0.994729,0.994796,0.994840,0.994895,0.994950,0.995071,0.995105,0.995171,0.995182,0.995226,0.995281,0.995281,0.995347,0.995380,0.995425,0.995491,0.995535,0.995634,0.995689,0.995700,0.995767,0.995844,0.995866,0.995866,0.995921,0.996031,0.996066,0.996231,0.996308,0.996364,0.996474,0.996575,0.996663,0.996707,0.996806,0.997005,0.997005,0.997192,0.997413,0.997501,0.997579,0.997634,0.997678,0.997788,0.997965,0.998053,0.998086,0.998196,0.998196,0.998439,0.998881,0.999134,0.999245,0.999523,0.999823};

	////Double_t momentum_RICH[110] = {10.25, 10.75, 11.25, 11.75, 12.25, 12.75, 13.25, 13.75, 14.25, 14.75, 15.25, 15.75, 16.25, 16.75, 17.25, 17.75, 18.25, 18.75, 19.25, 19.75, 20.25, 20.75, 21.25, 21.75, 22.25, 22.75, 23.25, 23.75, 24.25, 24.75, 25.25, 25.75, 26.25, 26.75, 27.25, 27.75, 28.25, 28.75, 29.25, 29.75, 30.25, 30.75, 31.25, 31.75, 32.25, 32.75, 33.25, 33.75, 34.25, 34.75, 35.25, 35.75, 36.25, 36.75, 37.25, 37.75, 38.25, 38.75, 39.25, 39.75, 40.25, 40.75, 41.25, 41.75, 42.25, 42.75, 43.25, 43.75, 44.25, 44.75, 45.25, 45.75, 46.25, 46.75, 47.25, 47.75, 48.25, 48.75, 49.25, 49.75, 50.25, 50.75, 51.25, 51.75, 52.25, 52.75, 53.25, 53.75, 54.25, 54.75, 55.25, 55.75, 56.25, 56.75, 57.25, 57.75, 58.25, 58.75, 59.25, 59.75, 60.25, 60.75, 61.25, 61.75, 62.25, 62.75, 63.25, 63.75, 64.25, 64.75}
	Double_t Pion_RICH_eff[110] = {0.252263, 0.234241, 0.205998, 0.189457, 0.19259, 0.196903, 0.47106, 0.742139, 0.841325, 0.882644, 0.896116, 0.914308, 0.928539, 0.920104, 0.943211, 0.943499, 0.960065, 0.949555, 0.946253, 0.953063, 0.955091, 0.953882, 0.955775, 0.9624, 0.9529, 0.957851, 0.954441, 0.957888, 0.963842, 0.963431, 0.958823, 0.965864, 0.959935, 0.956279, 0.962613, 0.955951, 0.959671, 0.96108, 0.96305, 0.957866, 0.955244, 0.950204, 0.951367, 0.943329, 0.946667, 0.940943, 0.938634, 0.935959, 0.933998, 0.93185, 0.924139, 0.921338, 0.908449, 0.908824, 0.903102, 0.890705, 0.901519, 0.895316, 0.888334, 0.892577, 0.881294, 0.874889, 0.870808, 0.87343, 0.854755, 0.847434, 0.847001, 0.832418, 0.840962, 0.83053, 0.820969, 0.818339, 0.822275, 0.805626, 0.804055, 0.803626, 0.799113, 0.792216, 0.789384, 0.780679, 0.775773, 0.765508, 0.755827, 0.742068, 0.744345, 0.748564, 0.722963, 0.71491, 0.710444, 0.722411, 0.710046, 0.702155, 0.704808, 0.70479, 0.695766, 0.698219, 0.703181, 0.694806, 0.704214, 0.704708, 0.68863, 0.701543, 0.696803, 0.697347, 0.680085, 0.667335, 0.668889, 0.661932, 0.680728, 0.661171};
	Double_t Muon_RICH_eff[110] = {0.577602, 0.901315, 0.966577, 0.978742, 0.978899, 0.987348, 0.988008, 0.987593, 0.990374, 0.988101, 0.987561, 0.990007, 0.989296, 0.988398, 0.990027, 0.989277, 0.988819, 0.989352, 0.990698, 0.988839, 0.989593, 0.989252, 0.989023, 0.986287, 0.989208, 0.988217, 0.987585, 0.986005, 0.987388, 0.985017, 0.982337, 0.98435, 0.981911, 0.980981, 0.979507, 0.978496, 0.973875, 0.976806, 0.972541, 0.967625, 0.9695, 0.966394, 0.96723, 0.96553, 0.963056, 0.961019, 0.954978, 0.948751, 0.946502, 0.942819, 0.941311, 0.934266, 0.932146, 0.928313, 0.914993, 0.918282, 0.90899, 0.905406, 0.899604, 0.894332, 0.893269, 0.883533, 0.878295, 0.871283, 0.870481, 0.867975, 0.855155, 0.848294, 0.844819, 0.816581, 0.784851, 0.776807, 0.777755, 0.776066, 0.768646, 0.760825, 0.767467, 0.556995, 0.762496, 0.756793, 0.74768, 0.753578, 0.741219, 0.743952, 0.74239, 0.736497, 0.734251, 0.732909, 0.723664, 0.727502, 0.713135, 0.70944, 0.721796, 0.851851, 0.736936, 0.729616, 0.72452, 0.740379, 0.724946, 0.73199, 0.74142, 0.733799, 0.735505, 0.738906, 0.738746, 0.738475, 0.735784, 0.731342, 0.729597, 0.728121};
	Double_t Ele_RICH_eff[110] = {1, 1, 1, 0.975392, 0.975392, 0.975392, 0.957592, 0.957592, 0.957592, 0.957592, 0.957359, 0.957359, 0.957359, 0.957359, 0.958269, 0.958269, 0.958269, 0.958269, 0.959497, 0.959497, 0.959497, 0.959497, 0.950271, 0.950271, 0.950271, 0.950271, 0.947937, 0.947937, 0.947937, 0.947937, 0.94, 0.94, 0.94, 0.94, 0.93, 0.93, 0.93, 0.93, 0.925198, 0.925198, 0.925198, 0.925198, 0.938905, 0.938905, 0.938905, 0.938905, 0.900987, 0.900987, 0.900987, 0.900987, 0.90, 0.90, 0.90, 0.90, 0.903532, 0.903532, 0.903532, 0.903532, 0.858207, 0.858207, 0.858207, 0.858207, 0.825, 0.825, 0.825, 0.825, 0.765, 0.765, 0.765, 0.765, 0.737872, 0.737872, 0.737872, 0.737872, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404, 0.678404};

	SetOutputState("fParticlesEvents", kOInvalid); //kOValid

  	fParticlesEvents.clear();


	//int nevent = 0;

	EventHeader* rhe = GetEventHeader();

  	//Int_t RunNumber = rhe->GetRunID();
  	//Int_t BurstID   = rhe->GetBurstID();

	//unsigned int trigger_rawtime = rhe->GetTimeStamp();
	unsigned int trigger_finetime = rhe->GetFineTime();
	//unsigned int trigger_timestamp = (double)trigger_rawtime*ClockPeriod + ((double)trigger_finetime*ClockPeriod)/256;
	//Double_t EventTime = ((double)trigger_finetime*ClockPeriod)/256;

	L0TPData *L0TPData = GetL0Data();
	UInt_t L0DataType = L0TPData->GetDataType();  //restituisce il data type (1 è fisico, 16 control)
	Bool_t L0PhysicsTrigger = (L0DataType & TRIGGER_L0_PHYSICS_TYPE);   // requiring physics triggers that is 1
	//Bool_t L0ControlTrigger = (L0DataType & TRIGGER_L0_CONTROL_TYPE);   // requiring control triggers that is 1
	//UInt_t L0TriggerFlags = L0TPData->GetTriggerFlags(); //restituisce le maschere di triggere soddisfatte (mask1: pinunu)
	//Bool_t L0PinunuMask = ((L0TriggerFlags & 2)>>1);   // requiring mask1 at L0; L0TriggerFlags = 2^(L0Mask) (eg. for mask 4, triggerflags = 16)
	//Bool_t L0multitrackMask = ((L0TriggerFlags & 32)>>5);   // requiring mask1 at L0; L0TriggerFlags = 2^(L0Mask) (eg. for mask 5, triggerflags = 32)

	if (!L0PhysicsTrigger) return;
	//if (!L0PinunuMask) return;

	TRecoCedarEvent*  CEDARevent  = GetEvent<TRecoCedarEvent> ();
	TRecoCHANTIEvent* CHANTIevent = GetEvent<TRecoCHANTIEvent>();
	//TRecoLKrEvent*    LKrevent    = GetEvent<TRecoLKrEvent>();
	TRecoLAVEvent*    LAVevent    = GetEvent<TRecoLAVEvent>   ();
	TRecoIRCEvent*    IRCevent    = GetEvent<TRecoIRCEvent>   ();
	TRecoSACEvent*    SACevent    = GetEvent<TRecoSACEvent>   ();
	// TRecoMUV3Event*    MUV3event    = GetEvent<TRecoLKrEvent>();
	// TRecoMUV1Event*    MUV1event    = GetEvent<TRecoLKrEvent>();
	// TRecoMUV2Event*    MUV2event    = GetEvent<TRecoLKrEvent>();

	EventVetoes* EventVetoesTemp = new EventVetoes;

	/////variable/////

	Double_t RichCentreX = 0.0;
	Double_t RichCentreY = 0.0;
	Double_t RichRadius = 0.0;

	Double_t RichPionCorrection = 0.0;
	Double_t RichMuonCorrection = 0.0;
	Double_t RichElCorrection = 0.0;


	// Double_t gtk_chi2 = 0.0;
	// Double_t gtk_chi2y = 0.0;
	// Double_t gtk_chi2time = 0.0;
	TVector3 GTK3_position_tmp(0,0,0);
	TVector3 GTK_momentum_tmp(0,0,0);

	TVector3 GTK3_position(0,0,0);
	TVector3 GTK_momentum(0,0,0);
	// Double_t GTK_time = 0.0;
	Double_t cda = 0.0;
	// Double_t Zvtx = 0.0;
	// Double_t gtk_chi2x = 0.0;
	TVector3 vtx(0,0,0);

	int nGTKcandidate = 0;

	//int GTKtrack = 0;

	/////////////////////////////////Cedar/////////////////////////////
  	//// Require a good Cedar candidates (>4 sectors)
  	// Int_t NCEDARcand = CEDARevent->GetNCandidates();
  	//Double_t CedarTime = 0.0;
  	//Int_t KCedarInTime = 0;

	// for (Int_t i=0; i<NCEDARcand; i++)
	// {
	// 	TRecoCedarCandidate* cedar_cand = (TRecoCedarCandidate*)CEDARevent->GetCandidate(i);
	// 	CedarTime = cedar_cand->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

	// 	if (cedar_cand->GetNSectors()>4 and fabs(CedarTime)<1.5) KCedarInTime = 1;
	// }

	//todo mettere KCedarInTime nell'output

	/////////////////////////////////LKR TMVA////////////////////////

	OutputState statelkrtmva = kOInvalid; //kOValid

	TClonesArray* fReconstructedCluster = (TClonesArray*)GetOutput("SpectrometerCalorimetersAssociation.MatchedClusters", statelkrtmva);

	CalorimeterCluster* clusterTMVA[20];

	for(int i=0; i<fReconstructedCluster->GetEntries(); i++)
	{
		clusterTMVA[i] = static_cast<CalorimeterCluster*>(fReconstructedCluster->At(i));
	}

	//////////////////////////////NOT ASSOCIATED CLUSTER LKR////////////////

	NeParticleCandidate* NeParticleTemp = new NeParticleCandidate;

	std::vector<EnergyCluster> fEnergyCluster = *(std::vector<EnergyCluster>*)GetOutput("EnergyClusterBuilder.Output", statelkrtmva);

	Double_t Z_LKr = GeometricAcceptance::GetInstance()->GetZLKr();

	Double_t cluster_time = 0.0;

	TVector3 NePosTemp(0,0,0);

	for(UInt_t t=0; t<fEnergyCluster.size();t++)
	{
		if(fEnergyCluster[t].SpectrometerAssociationExists() == 0)
		{

			cluster_time = fEnergyCluster[t].GetLKrCandidate()->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);
			if(cluster_time<-5 or cluster_time >5) continue;

			NePosTemp.SetXYZ(fEnergyCluster[t].GetLKrCandidate()->GetClusterX(),fEnergyCluster[t].GetLKrCandidate()->GetClusterY(),Z_LKr);

			NeParticleTemp->SetEnergyLKr(fEnergyCluster[t].GetLKrCandidate()->GetClusterEnergy());
			NeParticleTemp->SetTime(cluster_time);
			NeParticleTemp->SetPosition(NePosTemp);

			fNeParticle.push_back(NeParticleTemp);
		}
	}



	//////////////////////////////LAV MATCHING////////////////////////

	fLAVMatching->SetReferenceTime((((double)trigger_finetime*ClockPeriod)/256));
	Bool_t LAVMatched = fLAVMatching->LAVHasTimeMatching(LAVevent);

	EventVetoesTemp->SetLAVTrigMatching(LAVMatched);
	//todo fare lo stesso per irc e sac e metterlo in the output

	//////////////////////////////SAV MATCHING////////////////////////

	fSAVMatching->SetReferenceTime((((double)trigger_finetime*ClockPeriod)/256));
    // fSAVMatching->SetIRCTimeCuts(4.0, 4.0); // half time window; default = 5ns
    // fSAVMatching->SetSACTimeCuts(4.0, 4.0); // half time window; default = 5ns
	Bool_t SAVMatched = fSAVMatching->SAVHasTimeMatching(IRCevent, SACevent);

	EventVetoesTemp->SetSAVTrigMatching(SAVMatched);
	//todo fare lo stesso per irc e sac e metterlo in the output

	/////////////////////////////////LAV Candidate/////////////////////////////

  	Int_t NLAVcand = LAVevent->GetNCandidates();
  	Double_t LAVTime = 0.0;

	for (Int_t i=0; i<NLAVcand; i++)
	{
		TRecoLAVCandidate* fLAV_cand = static_cast<TRecoLAVCandidate*>(LAVevent->GetCandidate(i));
		LAVTime = fLAV_cand->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

		if (fabs(LAVTime)<10) EventVetoesTemp->AddLAVCandidate(fLAV_cand);
	}

	/////////////////////////////////IRC Candidate/////////////////////////////

  	Int_t NIRCHits = IRCevent->GetNHits();
  	Double_t IRCTime = 0.0;

	for (Int_t i=0; i<NIRCHits; i++)
	{
		 TIRCHit* fIRC_hit = static_cast<TIRCHit*>(IRCevent->GetHit(i));
		IRCTime = fIRC_hit->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

		if (fabs(IRCTime)<10) EventVetoesTemp->AddIRCHit(fIRC_hit);
	}

	/////////////////////////////////SAC Candidate/////////////////////////////

  	Int_t NSACHits = SACevent->GetNHits();
  	Double_t SACTime = 0.0;

	for (Int_t i=0; i<NSACHits; i++)
	{
		 TSACHit* fSAC_hit = static_cast<TSACHit*>(SACevent->GetHit(i));
		SACTime = fSAC_hit->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

		if (fabs(SACTime)<10) EventVetoesTemp->AddSACHit(fSAC_hit);
	}

	/////////////////////////////////CHANTI Candidate/////////////////////////////

  	Int_t NCHANTIcand = CHANTIevent->GetNCandidates();
  	Double_t CHANTITime = 0.0;
  	Bool_t CHANTIMatched = 0;

	for (Int_t i=0; i<NCHANTIcand; i++)
	{
		TRecoCHANTICandidate* fCHANTI_cand = static_cast<TRecoCHANTICandidate*>(CHANTIevent->GetCandidate(i));
		CHANTITime = fCHANTI_cand->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

		if (fabs(CHANTITime)<10) EventVetoesTemp->AddCHANTICandidate(fCHANTI_cand);
		if (fabs(CHANTITime)<2.5) CHANTIMatched = 1;
	}
 	EventVetoesTemp->SetCHANTITrigMatching(CHANTIMatched);

	//////////////////////////////DownstreamTrack/////////////////////
	//// Require at least one track in acceptance
	std::vector<DownstreamTrack> Tracks = *(std::vector<DownstreamTrack>*)GetOutput("DownstreamTrackBuilder.Output");

	// Double_t time_Track_temp = 0.0;
	Double_t Ttrack_temp = 0.0;
	Double_t Ttrack_time = 0.0;
	Double_t dist_tiles = 1000.0;
	Double_t dist_tiles_temp = 1000.0;

	Double_t Chi2_track = 0.0;
	Double_t Ptrack = 0.0;
	Double_t Ptrackbefore = 0.0;
	Int_t Q = 0;

	TRecoSpectrometerCandidate* Scand;

	Int_t MUV3hit = 0;
	Double_t eop = -1000.0;

	Double_t LKrAssEnergy = 0.0;
	// Double_t LKrAssTime = 0.0;

	Double_t MUV1AssEnergy = 0.0;
	// Double_t MUV1AssTime = 0.0;

	Double_t MUV2AssEnergy = 0.0;
	// Double_t MUV2AssTime = 0.0;

	Double_t CALEnergy = 0.0;

	Int_t Acceptance = 0;


	/////////////////////////////////GTK/////////////////////////////

	TRecoGigaTrackerEvent*  gigaTrackerEvent  = GetEvent<TRecoGigaTrackerEvent>();

	// gtk_chi2 = 0.0;
	// gtk_chi2y = 0.0;
	// gtk_chi2time = 0.0;
	GTK3_position_tmp.SetXYZ(0,0,0);
	GTK_momentum_tmp.SetXYZ(0,0,0);

	GTK3_position.SetXYZ(0,0,0);
	GTK_momentum.SetXYZ(0,0,0);
	// GTK_time = 0.0;
	// Zvtx = 0.0;
	// gtk_chi2x = 0.0;
	vtx.SetXYZ(0,0,0);

	nGTKcandidate = gigaTrackerEvent->GetNCandidates();

	//GTKtrack = 0;

	// gtk_chi2x = 1000.0;
	cda = 1000.0;

	for ( int j = 0; j < nGTKcandidate; j++ )
	{

		UpstreamTrack* UpstreamTrackTemp = new UpstreamTrack;

		fPionsIndex.clear();
		fElectronsIndex.clear();
		fMuonsIndex.clear();
		fChParticle.clear();
		fNeParticle.clear();
		// cout<<"inside GTK loop"<<endl;

		Int_t GlobalAcceptance = 0;
		int index_particle = 0;
		TVector3 vtx_tmp(0,0,0);

		TRecoGigaTrackerCandidate *candidate_GTK = static_cast<TRecoGigaTrackerCandidate*>(gigaTrackerEvent->GetCandidate(j));

		int GTK_type = candidate_GTK->GetType();

		Double_t GTK_time_tmp = candidate_GTK->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);
		GTK3_position_tmp = candidate_GTK->GetPosition(2);
		GTK_momentum_tmp = candidate_GTK->GetMomentum();
		// gtk_chi2 = candidate_GTK->GetChi2();
		Double_t gtk_chi2x_tmp = candidate_GTK->GetChi2X();
		// gtk_chi2y = candidate_GTK->GetChi2Y();
		// gtk_chi2time = candidate_GTK->GetChi2Time();

		if(GTK_type != 123) continue;
		if(GTK_time_tmp<-2 or GTK_time_tmp>2) continue;
		if(gtk_chi2x_tmp>20) continue;

		for(UInt_t t=0; t<Tracks.size();t++)
		{

			// cout<<"inside TRACK loop"<<endl;
			Ttrack_time = 0.0;
			Ttrack_temp = 0.0;
			ChParticleCandidate* ChParticleTemp = new ChParticleCandidate;
			MUV3hit=0;
			// LKrAssTime = 0.0;
			MUV1AssEnergy = 0.0;
			// MUV1AssTime = 0.0;
			MUV2AssEnergy = 0.0;
			// MUV2AssTime = 0.0;

			Acceptance = 0;

			// time_Track_temp = Tracks[t].GetTrackTime() - (((double)trigger_finetime*ClockPeriod)/256);
			Scand = Tracks[t].GetSpectrometerCandidate();
			Ptrack       = Tracks[t].GetMomentum(); // spectrometer calibration included
			Ptrackbefore = Tracks[t].GetMomentumBeforeFit();
			Chi2_track    = Tracks[t].GetChi2();
			Q            = Tracks[t].GetCharge();

			if (Chi2_track>20.0) continue;
			if (Scand->GetNChambers()!=4) continue;
			if (fabs(Ptrack-Ptrackbefore)>20000.0) continue; // 20 GeV
			if (Ptrack<3000 || Ptrack>70000) continue;

			if (GeometricAcceptance::GetInstance()->InAcceptance(Scand, kNewCHOD) and GeometricAcceptance::GetInstance()->InAcceptance(Scand, kLKr) and
				GeometricAcceptance::GetInstance()->InAcceptance(Scand, kMUV3) and GeometricAcceptance::GetInstance()->InAcceptance(Scand, kSpectrometer, 0) and
				GeometricAcceptance::GetInstance()->InAcceptance(Scand, kSpectrometer, 1) and GeometricAcceptance::GetInstance()->InAcceptance(Scand, kSpectrometer, 2) and
				GeometricAcceptance::GetInstance()->InAcceptance(Scand, kSpectrometer, 3)) Acceptance = 1;

			/////////////////////////////////CHOD/////////////////////////////

			dist_tiles = 1000.0;
			for(int c=0; c<Tracks[t].GetNCHODAssociationRecords();c++)
			{
				dist_tiles_temp = Tracks[t].GetCHODAssociationOutput().GetAssociationRecord(c)->GetTrackTileDistance();
				if(dist_tiles>dist_tiles_temp)
				{
					dist_tiles = dist_tiles_temp;
					Ttrack_temp = Tracks[t].GetCHODCandidateTime(c) - (((double)trigger_finetime*ClockPeriod)/256) ;
					Ttrack_time = Tracks[t].GetCHODCandidateTime(c);
				}
			}

			if(Ttrack_temp<-2 or Ttrack_temp >1.5) continue; //track in time with trigger (todo perhaps better use best association?)

			/////////////////////////////////MUV3/////////////////////////////

			if (Tracks[t].MUV3AssociationExists())
			{

				for(int m=0; m<Tracks[t].GetNMUV3AssociationRecords();m++)
				{

				 	Double_t TAssMUV3  = Tracks[t].GetMUV3Time(m) - (((double)trigger_finetime*ClockPeriod)/256);

				 	if(TAssMUV3>-5 and TAssMUV3<5) MUV3hit=1;
				}
			}


			/////////////////////////////////LKr/////////////////////////////

			if(Tracks[t].LKrAssociationExists())
			{
				eop = Tracks[t].GetLKrEoP();
			}
			 else continue; //todo verificare che vada bene

			LKrAssEnergy = Tracks[t].GetLKrEnergy();
			// LKrAssTime = Tracks[t].GetLKrAssociationOutput().GetBestAssociationRecord()->GetLKrCandidate()->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

			//todo serve un taglio sul tempo del cluster?

			/////////////////////////////////MUV1/////////////////////////////

			if(Tracks[t].MUV1AssociationExists())
			{
				MUV1AssEnergy = Tracks[t].GetMUV1ClusterEnergy();
				// MUV1AssTime = Tracks[t].GetMUV1ClusterTime();
			}

			/////////////////////////////////MUV2/////////////////////////////

			if(Tracks[t].MUV2AssociationExists())
			{
				MUV2AssEnergy = Tracks[t].GetMUV2ClusterEnergy();
				// MUV2AssTime = Tracks[t].GetMUV2ClusterTime();
			}

			///////////vertex///////////////


			fCDAcomp->SetLine1Point1(Tracks[t].GetPositionBeforeMagnet());
			fCDAcomp->SetDir1(Tracks[t].GetMomentumBeforeMagnet());
			fCDAcomp->SetLine2Point1(GTK3_position_tmp);
			fCDAcomp->SetDir2(GTK_momentum_tmp);
			fCDAcomp->ComputeVertexCDA();
			cda  = fCDAcomp->GetCDA();
			vtx = fCDAcomp->GetVertex();
			Double_t Zvtx_tmp = vtx.z();

			// cout<<"pre vertex: iEvent "<<iEvent<<", gtk cand "<<j<<", track can"<<t<<endl;
			// cout<<"GTK_momentum_tmp= "<<GTK_momentum_tmp.z()<<", cda= "<<cda<<", zvtx="<<Zvtx_tmp<<endl;

			if(cda>10) continue;
			if(Zvtx_tmp<105000 or Zvtx_tmp>180000) continue;

			GTK3_position = GTK3_position_tmp;
			GTK_momentum = GTK_momentum_tmp;

			RichCentreX = 0.0;
			RichCentreY = 0.0;
			RichRadius = 0.0;

			RichPionCorrection = 0.0;
			RichMuonCorrection = 0.0;
			RichElCorrection = 0.0;


			if(Tracks[t].RICHAssociationSuccessful())
			{
				RichCentreX = Tracks[t].GetRICHRingCentrePosition().X();
				RichCentreY = Tracks[t].GetRICHRingCentrePosition().Y();
				RichRadius = Tracks[t].GetRICHRingRadius();

				if(RichCentreX <10000 and RichCentreY<10000 and RichRadius<10000)
				{
					if(Tracks[t].GetMomentumAfterMagnet().Z()<10250)
					{
						RichPionCorrection = Pion_RICH_eff[0];
						RichMuonCorrection = Muon_RICH_eff[0];
						RichElCorrection = Ele_RICH_eff[0];
					}
					else
					{
						if(Tracks[t].GetMomentumAfterMagnet().Z()>=64750)
						{
							RichPionCorrection = Pion_RICH_eff[109];
							RichMuonCorrection = Muon_RICH_eff[109];
							RichElCorrection = Ele_RICH_eff[109];

						}
						else
						{
							int cursoreRich = (int)floor((Tracks[t].GetMomentumAfterMagnet().Z()/1000.0-10.25)*2)+1;
							if(cursoreRich<110)
							{
								RichPionCorrection = Pion_RICH_eff[cursoreRich];
								RichMuonCorrection = Muon_RICH_eff[cursoreRich];
								RichElCorrection = Ele_RICH_eff[cursoreRich];
							}
						}
					}
				}
			}


			TLorentzVector Kaon;
			Kaon.SetVectM(GTK_momentum, MKCH);
			TLorentzVector Pion;
			Pion.SetVectM(Tracks[t].GetMomentumBeforeMagnet(), MPI);

			TLorentzVector MissVect;

			MissVect = Kaon - Pion;
			Double_t Mmiss2_pi = MissVect.M2();

			CALEnergy = LKrAssEnergy+MUV1AssEnergy+MUV2AssEnergy;


			LKrElectronProbability=clusterTMVA[t]->GetIsElectronProbability();
			LKrMuonProbability=clusterTMVA[t]->GetIsMuonProbability();
			LKrPionProbability=clusterTMVA[t]->GetIsPionProbability();
			RiCHElectronProbability=Tracks[t].GetRICHLikelihoodElectron();
			RiCHMuonProbability=Tracks[t].GetRICHLikelihoodMuon();
			RiCHPionProbability=Tracks[t].GetRICHLikelihoodPion();

			ElectronProbabilityProd = (LKrElectronProbability * (1 - RichElCorrection + RiCHElectronProbability*RichElCorrection));
			MuonProbabilityProd = (LKrMuonProbability * (1 - RichMuonCorrection + RiCHMuonProbability*RichMuonCorrection));
			PionProbabilityProd = (LKrPionProbability * (1 - RichPionCorrection + RiCHPionProbability*RichPionCorrection));

			GlobalAcceptance += Acceptance;

			ChParticleTemp->SetTrack(t);
			ChParticleTemp->SetCharge(Q);
			ChParticleTemp->SetAcceptance(Acceptance);
			ChParticleTemp->SetMomentum(Ptrack);
			ChParticleTemp->SetCDA(cda);
			ChParticleTemp->SetEnergyLKr(LKrAssEnergy);
			ChParticleTemp->SetEnergyMUV1(MUV1AssEnergy);
			ChParticleTemp->SetEnergyMUV2(MUV2AssEnergy);
			ChParticleTemp->SetEnergyCAL(CALEnergy);
			ChParticleTemp->SetEop(eop);
			ChParticleTemp->SetTime(Ttrack_time);
			ChParticleTemp->SetMmiss2(Mmiss2_pi);
			ChParticleTemp->SetMUV3Ass(MUV3hit);
			ChParticleTemp->SetVertex(vtx);
			ChParticleTemp->SetMomentumBeforeMagnet(Tracks[t].GetMomentumBeforeMagnet());
			ChParticleTemp->SetMomentumAfterMagnet(Tracks[t].GetMomentumAfterMagnet());
			ChParticleTemp->SetPositionBeforeMagnet(Tracks[t].GetPositionBeforeMagnet());
			ChParticleTemp->SetPositionAfterMagnet(Tracks[t].GetPositionAfterMagnet());
			ChParticleTemp->SetMomentumKaon(GTK_momentum);

			ChParticleTemp->SetLKrElectronProbability(LKrElectronProbability);
			ChParticleTemp->SetLKrMuonProbability(LKrMuonProbability);
			ChParticleTemp->SetLKrPionProbability(LKrPionProbability);

			ChParticleTemp->SetRiCHElectronProbability(RiCHElectronProbability);
			ChParticleTemp->SetRiCHMuonProbability(RiCHMuonProbability);
			ChParticleTemp->SetRiCHPionProbability(RiCHPionProbability);

			ChParticleTemp->SetfElectronProbabilityCombo(ElectronProbabilityProd);
			ChParticleTemp->SetfMuonProbabilityCombo(MuonProbabilityProd);
			ChParticleTemp->SetfPionProbabilityCombo(PionProbabilityProd);

			if(ElectronProbabilityProd >= 0.9 and MuonProbabilityProd < 0.9 and PionProbabilityProd < 0.9) fElectronsIndex.push_back(index_particle);
			if(ElectronProbabilityProd < 0.9 and MuonProbabilityProd >= 0.9 and PionProbabilityProd < 0.9) fMuonsIndex.push_back(index_particle);
			if(ElectronProbabilityProd < 0.9 and MuonProbabilityProd < 0.9 and PionProbabilityProd >= 0.9) fPionsIndex.push_back(index_particle);

			// cout<<"end track index "<<index_particle<<" acceptance "<<Acceptance<<endl;

			fChParticle.push_back(ChParticleTemp);



			index_particle++;

		}

		UpstreamTrackTemp->SetTrackID(j);
		UpstreamTrackTemp->SetGigaTrackerCandidate(candidate_GTK);

		/////////////////////////////////Cedar/////////////////////////////
		Int_t NCEDARcand = CEDARevent->GetNCandidates();
		Double_t CedarTime = 0.0;

		for (Int_t i=0; i<NCEDARcand; i++)
		{
			TRecoCedarCandidate* cedar_cand = static_cast<TRecoCedarCandidate*>(CEDARevent->GetCandidate(i));
			CedarTime = cedar_cand->GetTime() - (((double)trigger_finetime*ClockPeriod)/256);

			if (fabs(CedarTime)<2) UpstreamTrackTemp->AddCedarCandidate(cedar_cand);
		}

		if(GlobalAcceptance != 0 and index_particle>0)
		{
		EventCandidate* fParticlesEventsTemp = new EventCandidate;
		fParticlesEventsTemp->SetChargedParticleCandidates(fChParticle);
		fParticlesEventsTemp->SetNeutralParticleCandidates(fNeParticle);
		fParticlesEventsTemp->SetElectronsIndices(fElectronsIndex);
		fParticlesEventsTemp->SetMuonsIndices(fMuonsIndex);
		fParticlesEventsTemp->SetPionsIndices(fPionsIndex);
		fParticlesEventsTemp->AddUpstreamTrack(UpstreamTrackTemp);
		fParticlesEventsTemp->AddEventVetoes(EventVetoesTemp);

		fParticlesEvents.push_back(fParticlesEventsTemp);

		//nevent++;

		SetOutputState("fParticlesEvents", kOValid);
		}

		// cout<<" GlobalAcceptance = "<<GlobalAcceptance<<" index_particle = "<<index_particle<<" nevent = "<<nevent<<endl;
	}

}

void ParticleCandidateBuilder::PostProcess(){
	/// \MemberDescr
	/// This function is called after an event has been processed by all analyzers. It could be used to free some memory allocated
	/// during the Process.
	/// \EndMemberDescr

}

void ParticleCandidateBuilder::EndOfBurstUser(){
	/// \MemberDescr
	/// This method is called when a new file is opened in the ROOT TChain (corresponding to a start/end of burst in the normal NA62 data taking) + at the end of the last file\n
	/// Do here your start/end of burst processing if any
	/// \EndMemberDescr
}

void ParticleCandidateBuilder::EndOfRunUser(){
	/// \MemberDescr
	/// This method is called at the end of the processing (corresponding to a end of run in the normal NA62 data taking)\n
	/// Do here your end of run processing if any\n
	/// \n
	/// You can also use this space to save plots in your output file.\n
	/// If you want to save them all, just call\n
	/// \code
	/// 	SaveAllPlots();
	/// \endcode
	/// Or you can just save the ones you want with\n
	/// \code
	/// 	histogram->Write()\n
	///		fHisto.Get...("histoname")->Write();
	/// \endcode
	/// \n
	/// To run over a set of histograms you can use Iterators (HistoHandler::IteratorTH1,
	/// HistoHandler::IteratorTH2, HistoHandler::IteratorTGraph). You can use it to run over
	/// all the histograms or only a subset of histogram by using one of the two forms of
	/// GetIterator...  (replace ... by TH1, TH2 or TGraph)\n
	/// \code
	/// 	GetIterator...()
	/// \endcode
	/// will get an Iterator running over all histograms of this type while
	/// \code
	/// 	GetIterator...("baseName")
	/// \endcode
	/// will get an Iterator running only over the histograms of this type whose name starts
	/// with baseName.\n
	/// For more details and examples on how to use the Iterator after getting it, please refer
	/// to the HistoHandler::Iterator documentation.\n
	/// Although this is described here, Iterators can be used anywhere after the
	/// histograms have been booked.
	/// \EndMemberDescr

	SaveAllPlots();

}

void ParticleCandidateBuilder::DrawPlot(){
	/// \MemberDescr
	/// This method is called at the end of processing to draw plots when the -g option is used.\n
	/// If you want to draw all the plots, just call\n
	/// \code
	/// 	DrawAllPlots();
	/// \endcode
	/// Or get the pointer to the histogram with\n
	/// \code
	/// 	fHisto.GetTH1("histoName");// for TH1
	/// 	fHisto.GetTH2("histoName");// for TH2
	/// 	fHisto.GetGraph("graphName");// for TGraph and TGraphAsymmErrors
	///     fHisto.GetHisto("histoName");// for TH1 or TH2 (returns a TH1 pointer)
	/// \endcode
	/// and manipulate it as usual (TCanvas, Draw, ...)\n
	/// \EndMemberDescr

//	DrawAllPlots();
}
