#ifndef HACDigitizer_H
#define HACDigitizer_H 1


#include <vector>

#include "THACDigi.hh"
#include "THACEvent.hh"
#include "NA62VDigitizer.hh"

class HACDigitizer : public NA62VDigitizer {
  public:

    explicit HACDigitizer(NA62VReconstruction*);
    virtual ~HACDigitizer();
    virtual TDetectorVEvent * ProcessEvent(TDetectorVEvent *);
    virtual void StartOfBurst();
    virtual void EndOfBurst();

  public:
    void ReadSignalParametersFile(TString signalFileName);
    void CreateDigiStructure(const Int_t& ich, const Int_t& iHit, const Double_t& charge, const Double_t& channelTime);
    Int_t GetNThresholds(const Int_t &ich, const Double_t& charge, Double_t& riseSlope);
    Double_t EnergyToCharge(const Double_t& hitEnergy);

    Double_t ChargeToTconversion(const Double_t& charge, const Int_t& iThr);

  private:
    THACEvent * HACEvent;
    //Parameters for digital signal generation
    Double_t fMeanNph; //Number of photons generated by 1MeV of energy deposit
    Double_t fMeanNphSigma; //Sigma of previous.

    //Wavelength characteristics
    Double_t fWLStrappingEff; //Trapping efficiency of wavelength-shifter fiber
    Double_t fWLSattenuationLength; //Attenuation length of -----"------------
    Double_t fDistanceFromSiPM; //Length of the fiber

    //SiPM characteristics
    Double_t fPDE; //Photon detection efficiency
    Double_t fNpixelsTotal; //Totla number of pixels in one SiPM
    Double_t fWLSlightSpeed;
    Double_t fSiPMgain; //preamp before SiPM gain
    Double_t fChargePerPixel;

    //Charge relation to ToT is an exponential for each threshold.
    //Charge(ToT) = Offset + Constant * Exp(ToT*Slope)
    std::vector<Double_t> fChargeToTOffset;
    std::vector<Double_t> fChargeToTConstant;
    std::vector<Double_t> fChargeToTSlope;

    //Threhold voltages
    Double_t *fThresholdValues; //should be 360 values, but for the moment, this will do.
    Double_t fChannelTimeResolution;
    //Signal parameters. The trailing part of the signal is a sum of
    //two decay exponentials.
    Double_t fMaxAmplChargeSlope; // Slope in linear function Maximum Amplitude vs. Charge
    Double_t fMaxAmplChargeConstant; // Offset in the above function
    Double_t fRiseTime, fRiseTimeSigma; // Rise time of the signal and it's sigma
};

#endif
