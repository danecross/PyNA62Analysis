#include "TSlimRecoLAVCandidate.hh"
#include "TRecoLAVCandidate.hh"

ClassImp(TSlimRecoLAVCandidate)

TSlimRecoLAVCandidate::TSlimRecoLAVCandidate():
  fAlgorithm(kNotPass), // =0 if cluster is generated by grouping adjacent blocks; =1 if clustering is generated by grouping blocks close in phi and time (so-called "tracking")
  fClusterType(kUnknown),
  fNHitsPerLayer{0,0,0,0,0},
  fTime(0),
  fEnergy(0),
  fZUnweightedError(0.),
  fPhiUnweightedError(0.),
  fZWeightedError(0.),
  fPhiWeightedError(0.),
  fPosition(0,0,0),
  fWeightedPosition(0,0,0)
{
  fHitsIndexes.clear();
}

TSlimRecoLAVCandidate::TSlimRecoLAVCandidate(TRecoLAVCandidate* candReco)
{
    FromReco(candReco);
}

void TSlimRecoLAVCandidate::FromReco(TRecoVCandidate* candVReco) {

  TRecoLAVCandidate *candReco = static_cast<TRecoLAVCandidate*>(candVReco);
  SetTime(candReco->GetTime());
  SetEnergy(candReco->GetEnergy());
  SetPosition(candReco->GetPosition());
  SetWeightedPosition(candReco->GetWeightedPosition());

  SetZUnweightedError(candReco->GetZUnweightedError());
  SetPhiUnweightedError(candReco->GetPhiUnweightedError());
  SetZWeightedError(candReco->GetZWeightedError());
  SetPhiWeightedError(candReco->GetPhiWeightedError());

  for (Int_t ilay=0; ilay<5; ilay++) {
    SetNHitsPerLayer(ilay,candReco->GetNHitsPerLayer(ilay));
  }
  SetClusterType(candReco->GetClusterType());
  SetAlgorithm(candReco->GetAlgorithm());

  fHitsIndexes.reserve(candReco->GetNHits());
  for (int ihit = 0; ihit < candReco->GetNHits(); ihit++)
    AddHitIndex(candReco->GetHitsIndexes()[ihit]);
}

void TSlimRecoLAVCandidate::ToReco(TRecoVCandidate* candVReco)
{
    TRecoLAVCandidate *candReco = static_cast<TRecoLAVCandidate*>(candVReco);
    candReco->SetTime(GetTime());
    candReco->SetEnergy(GetEnergy());
    candReco->SetPosition(GetPosition());
    candReco->SetWeightedPosition(GetWeightedPosition());

    candReco->SetZUnweightedError(GetZUnweightedError());
    candReco->SetPhiUnweightedError(GetPhiUnweightedError());
    candReco->SetZWeightedError(GetZWeightedError());
    candReco->SetPhiWeightedError(GetPhiWeightedError());

    for (Int_t ilay=0; ilay<5; ilay++) {
      candReco->SetNHitsPerLayer(ilay,GetNHitsPerLayer(ilay));
    }
    candReco->SetClusterType(GetClusterType());
    candReco->SetAlgorithm(GetAlgorithm());

    for (const Short_t hitIndex : GetHitsIndexes())
      candReco->AddHit(hitIndex);

}

Double_t TSlimRecoLAVCandidate::GetCentroidErrorMatrix(TVector3 position, Double_t sigmaPhi, Double_t sigmaZ, Double_t SigmaR, Int_t i1, Int_t i2) const {
  return TRecoLAVCandidate::GetCentroidErrorMatrix(position,sigmaPhi,sigmaZ, SigmaR, i1, i2);
}
